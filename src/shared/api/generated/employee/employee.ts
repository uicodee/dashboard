/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 1.0.0
 */
import type {
  CardInput,
  CardOutput,
  EmployeeInput,
  EmployeeLanguage,
  EmployeeOutput,
  EmployeeSkill,
  OrderOutput,
  SkillOutput
} from '../../model'
import { createInstance } from '../../http/index';
import type { BodyType } from '../../http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const getEmployee = () => {
/**
 * Register new employee
 * @summary Register Employee
 */
const registerEmployeeEmployeeRegisterPost = (
    employeeInput: BodyType<EmployeeInput>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<EmployeeOutput>(
      {url: `/employee/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: employeeInput
    },
      options);
    }
  /**
 * Get my info
 * @summary Get Me
 */
const getMeEmployeeMeGet = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<EmployeeOutput>(
      {url: `/employee/me`, method: 'GET'
    },
      options);
    }
  /**
 * Update language
 * @summary Update Language
 */
const updateLanguageEmployeeLanguagePut = (
    employeeLanguage: BodyType<EmployeeLanguage>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<unknown>(
      {url: `/employee/language`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: employeeLanguage
    },
      options);
    }
  /**
 * Get all orders
 * @summary All Orders
 */
const allOrdersEmployeeOrdersGet = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<OrderOutput[]>(
      {url: `/employee/orders`, method: 'GET'
    },
      options);
    }
  /**
 * Get all skills
 * @summary All Employee Skills
 */
const allEmployeeSkillsEmployeeSkillsGet = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<SkillOutput[]>(
      {url: `/employee/skills`, method: 'GET'
    },
      options);
    }
  /**
 * Update skill
 * @summary Update Skill
 */
const updateSkillEmployeeSkillPut = (
    employeeSkill: BodyType<EmployeeSkill>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<EmployeeOutput>(
      {url: `/employee/skill`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: employeeSkill
    },
      options);
    }
  /**
 * Get employee cards
 * @summary Get Cards
 */
const getCardsEmployeeCardGet = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CardOutput[]>(
      {url: `/employee/card/`, method: 'GET'
    },
      options);
    }
  /**
 * Create card
 * @summary Create Card
 */
const createCardEmployeeCardPost = (
    cardInput: BodyType<CardInput>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CardOutput>(
      {url: `/employee/card/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cardInput
    },
      options);
    }
  /**
 * Get all employees
 * @summary Get Employees
 */
const getEmployeesEmployeeGet = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<EmployeeOutput[]>(
      {url: `/employee/`, method: 'GET'
    },
      options);
    }
  /**
 * Get employee
 * @summary Get Employee
 */
const getEmployeeEmployeeEmployeeIdGet = (
    employeeId: number,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<EmployeeOutput>(
      {url: `/employee/${employeeId}`, method: 'GET'
    },
      options);
    }
  return {registerEmployeeEmployeeRegisterPost,getMeEmployeeMeGet,updateLanguageEmployeeLanguagePut,allOrdersEmployeeOrdersGet,allEmployeeSkillsEmployeeSkillsGet,updateSkillEmployeeSkillPut,getCardsEmployeeCardGet,createCardEmployeeCardPost,getEmployeesEmployeeGet,getEmployeeEmployeeEmployeeIdGet}};
export type RegisterEmployeeEmployeeRegisterPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['registerEmployeeEmployeeRegisterPost']>>>
export type GetMeEmployeeMeGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['getMeEmployeeMeGet']>>>
export type UpdateLanguageEmployeeLanguagePutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['updateLanguageEmployeeLanguagePut']>>>
export type AllOrdersEmployeeOrdersGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['allOrdersEmployeeOrdersGet']>>>
export type AllEmployeeSkillsEmployeeSkillsGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['allEmployeeSkillsEmployeeSkillsGet']>>>
export type UpdateSkillEmployeeSkillPutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['updateSkillEmployeeSkillPut']>>>
export type GetCardsEmployeeCardGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['getCardsEmployeeCardGet']>>>
export type CreateCardEmployeeCardPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['createCardEmployeeCardPost']>>>
export type GetEmployeesEmployeeGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['getEmployeesEmployeeGet']>>>
export type GetEmployeeEmployeeEmployeeIdGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getEmployee>['getEmployeeEmployeeEmployeeIdGet']>>>
