/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 1.0.0
 */
import type {
  DeleteOrder,
  EditOrder,
  EmployeeOutput,
  OrderInput,
  OrderOutput
} from '../../model'
import { createInstance } from '../../http/index';
import type { BodyType } from '../../http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const getOrder = () => {
/**
 * Get all orders
 * @summary All Orders
 */
const allOrdersOrderGet = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<OrderOutput[]>(
      {url: `/order/`, method: 'GET'
    },
      options);
    }
  /**
 * Edit order
 * @summary Edit Order
 */
const editOrderOrderPut = (
    editOrder: BodyType<EditOrder>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<OrderOutput>(
      {url: `/order/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: editOrder
    },
      options);
    }
  /**
 * Create new order
 * @summary Create Order
 */
const createOrderOrderPost = (
    orderInput: BodyType<OrderInput>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<OrderOutput>(
      {url: `/order/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderInput
    },
      options);
    }
  /**
 * Delete orders
 * @summary Delete Orders
 */
const deleteOrdersOrderDelete = (
    deleteOrder: BodyType<DeleteOrder>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<unknown>(
      {url: `/order/`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteOrder
    },
      options);
    }
  /**
 * Get all order responses
 * @summary Get Order Responses
 */
const getOrderResponsesOrderOrderIdResponsesGet = (
    orderId: number,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<EmployeeOutput[]>(
      {url: `/order/${orderId}/responses`, method: 'GET'
    },
      options);
    }
  /**
 * Get order by id
 * @summary Get Order
 */
const getOrderOrderOrderIdGet = (
    orderId: number,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<OrderOutput>(
      {url: `/order/${orderId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Select Random Employee
 */
const selectRandomEmployeeOrderOrderIdSelectRandomPost = (
    orderId: number,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<unknown>(
      {url: `/order/${orderId}/select-random`, method: 'POST'
    },
      options);
    }
  return {allOrdersOrderGet,editOrderOrderPut,createOrderOrderPost,deleteOrdersOrderDelete,getOrderResponsesOrderOrderIdResponsesGet,getOrderOrderOrderIdGet,selectRandomEmployeeOrderOrderIdSelectRandomPost}};
export type AllOrdersOrderGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOrder>['allOrdersOrderGet']>>>
export type EditOrderOrderPutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOrder>['editOrderOrderPut']>>>
export type CreateOrderOrderPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOrder>['createOrderOrderPost']>>>
export type DeleteOrdersOrderDeleteResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOrder>['deleteOrdersOrderDelete']>>>
export type GetOrderResponsesOrderOrderIdResponsesGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOrder>['getOrderResponsesOrderOrderIdResponsesGet']>>>
export type GetOrderOrderOrderIdGetResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOrder>['getOrderOrderOrderIdGet']>>>
export type SelectRandomEmployeeOrderOrderIdSelectRandomPostResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOrder>['selectRandomEmployeeOrderOrderIdSelectRandomPost']>>>
